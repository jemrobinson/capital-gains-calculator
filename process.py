#! /usr/bin/env python
"""Process CSV files generated by Portfolio Performance using: All transactions > Export"""
from argparse import ArgumentParser
import logging
from pandas import read_csv, to_datetime
from numpy import datetime64
from capital_gains_calculator import Security


def process_csv(file_name, tax_year, account_names):
    # Set start and end dates
    try:
        start_date = datetime64(f"{tax_year.split('-')[0]}-04-06")
        end_date = datetime64(f"{int(tax_year.split('-')[0]) + 1}-04-05")
    except AttributeError:
        raise ValueError(
            "Could not interpret '%s' as a UK tax year!"
            % (tax_year if tax_year else "")
        ) from None
    logging.debug(f"Set start date ({start_date}) and end date ({end_date})")

    # Read all CSV entries with a valid symbol and security
    df_all = read_csv(file_name)
    df_all.dropna(subset=["Symbol", "Security"], inplace=True)

    # Set datatypes
    df_all["Date"] = to_datetime(df_all["Date"])
    df_all["Shares"] = df_all["Shares"].str.replace(",", "")
    df_all["Amount"] = df_all["Amount"].str.replace(",", "")
    logging.debug(f"Processing {df_all.shape[0]} transactions...")

    # Restrict to specified accounts
    if account_names:
        df_all = df_all.loc[(df_all["Cash Account"].isin(account_names))]
    df_securities = df_all[["ISIN", "Symbol", "Security"]].drop_duplicates()
    logging.debug(f"Identified {df_securities.shape[0]} securities...")

    logging.info(
        f"Looking for capital gains during UK tax year {start_date.astype(object).year}-{end_date.astype(object).year}..."
    )
    for _, transaction in sorted(
        df_securities.iterrows(), key=lambda r: r[1][2].lower()
    ):
        security = Security(symbol=transaction[1], name=transaction[2])
        security.add_transactions(df_all.loc[(df_all["Security"] == security.name)])
        if any([start_date <= d[0].date <= end_date for d in security.disposals]):
            security.report()


if __name__ == "__main__":
    # Parse command line arguments
    parser = ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-c", "--csv", type=str, help="CSV file to process")
    group.add_argument("-x", "--xml", type=str, help="XML file to process")
    parser.add_argument(
        "-t",
        "--tax-year",
        metavar="N",
        type=str,
        help="tax year to consider [either YYYY-YY or YYYY-YYYY]",
    )
    parser.add_argument(
        "-n", "--account-names", type=str, nargs="+", help="accounts to consider"
    )
    parser.add_argument(
        "-v", "--verbosity", action="count", default=0, help="increase output verbosity"
    )
    args = parser.parse_args()

    # Set up logging
    log_levels = [logging.INFO, logging.DEBUG]
    logging.basicConfig(
        format=r"%(asctime)s %(levelname)8s: %(message)s",
        datefmt=r"%Y-%m-%d %H:%M:%S",
        level=log_levels[min(len(log_levels) - 1, args.verbosity)],
    )

    if args.csv:
        process_csv(args.csv, args.tax_year, args.account_names)
